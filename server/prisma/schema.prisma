generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String            @id @default(uuid())
  telegramID           String            @unique @db.VarChar(255)
  name                 String            @db.VarChar(255)
  username             String            @unique
  phoneNo              String?           @unique
  profilePicture       String?
  bio                  String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  isOnline             Boolean           @default(true)
  gameHistory          GameLog[]
  receivedTransactions Transaction[]     @relation("receiver")
  sentTransactions     Transaction[]     @relation("sender")
  transactions         Transaction[]     @relation("transactions")
  friends              Friend[]          @relation("userFriends")
  friendOf             Friend[]          @relation("friendUsers")
  notifications        Notification[]
  gameParticipants     GameParticipant[]
}

model Friend {
  id        Int      @id @default(autoincrement())
  userId    String
  friendId  String
  status    String // pending, accepted, rejected
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation("userFriends", fields: [userId], references: [id])
  friend User @relation("friendUsers", fields: [friendId], references: [id])

  @@unique([userId, friendId])
  @@index([userId])
  @@index([friendId])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    String
  message   String
  type      String // game invite, friend request
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Game {
  id           String            @id @default(uuid())
  buyIn        Float?            @default(0)
  maxPlayers   Int
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  gameType     GameType          @default(v1v1)
  participants GameParticipant[]
  gameHistory  GameLog[]
  status       GameStatus        @default(OPEN)
}

model GameParticipant {
  id        Int      @id @default(autoincrement())
  gameId    String
  playerId  String
  team      Int // Use this to distinguish teams (e.g., 1 for Team 1, 2 for Team 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  game   Game @relation(fields: [gameId], references: [id])
  player User @relation(fields: [playerId], references: [id])

  @@unique([gameId, playerId])
  @@index([gameId])
  @@index([playerId])
}

model GameLog {
  id        Int      @id @default(autoincrement())
  gameId    String
  playerId  String
  move      String // rock, paper, scissors
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  game      Game     @relation(fields: [gameId], references: [id])
  player    User     @relation(fields: [playerId], references: [id])

  @@index([gameId])
  @@index([playerId])
}

model Transaction {
  id         Int      @id @default(autoincrement())
  amount     Float
  senderId   String
  receiverId String
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  receiver   User     @relation("receiver", fields: [receiverId], references: [id])
  sender     User     @relation("sender", fields: [senderId], references: [id])
  user       User     @relation("transactions", fields: [userId], references: [id])

  @@index([receiverId])
  @@index([senderId])
  @@index([userId])
}

enum GameType {
  v1v1
  BattleRoyale
}

enum GameStatus {
  OPEN
  IN_PROGRESS
  CLOSED
}
